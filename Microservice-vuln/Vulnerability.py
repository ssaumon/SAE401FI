from flask import Flask, jsonify, request
import json, os, requests
app = Flask(__name__)

def lire():
     with open("Vulnerability.json", 'r', encoding="utf-8") as f:
        contenu=json.load(f)
        return contenu

def write_json(new_data):

    if os.path.exists("Vulnerability.json"):
        os.remove("Vulnerability.json")

    with open("Vulnerability.json",'w') as file:
        json.dump(new_data, file, indent = 4)

def ajouter():

    vuln=request.get_json()
    if isinstance(vuln, dict):
        vuln=[vuln]

    contenu=lire()
    for item in vuln:  
        required_keys = ['id', 'VulnerabilityID', 'PkgName', 'InstalledVersion', 'FixedVersion', 'Severity', 'Title', 'Description', 'References']
        missing_keys = [key for key in required_keys if key not in item]
        if missing_keys:
            return(f"Données invalides ou champs manquants : {', '.join(missing_keys)}",400)
        id=item['id']
        for element in contenu:
            if isinstance(element, dict)and element.get('id') == id:
                return("L'ID existe déjà",422)

        contenu.append(item)
        
    write_json(contenu)
    
    return("Ajout Réussi",200)

@app.route("/")
def hello_world():
    return "<p>MicroService Vulnerability</p>"

@app.route("/Vulnerability", methods=["GET","POST","PUT"])
def ListerAjouter():
    if request.method=="GET":
        try :   
            contenu=lire()
        except: 
            return("Erreur lors de la lecture du fichier JSON",401)
        contenu = lire()
        return(jsonify(contenu),200)
    
    if request.method=="POST":
        return(ajouter())
    
    if request.method=="PUT":
        try:
            contenu=lire()
        except: 
            return("Erreur de lecture de la base de données",401)
        Vuln=request.get_json()
        id_Vuln=Vuln['id']
        for idx, element in enumerate(contenu):
            if element['id'] == id_Vuln:
                contenu[idx] = Vuln 
                write_json(contenu)
                return("Mise à jour réussie",200)
        return("Aucune vulnérabilité avec cet ID",404)
    
@app.route("/Vulnerability/<int:id_Vuln>", methods=["GET","DELETE","PUT"])
def rechSupModID(id_Vuln):
    contenu=lire()
    if request.method=="GET":
        for element in contenu:
            if element['id']==id_Vuln:
                return(element,200)
    return("Aucune vulnérabilité avec cet ID",404)
            
    if request.method=="DELETE":
        contenu = [element for element in contenu if element['id'] != id_Vuln]
        write_json(contenu)
        return("Suppression réussie",200)
    return("Vulnérabilité non supprimé",500)

    if request.method=="PUT": 
        Vuln=request.get_json()
        for idx, element in enumerate(contenu):
            if element['id'] == id_Vuln:
                contenu[idx] = Vuln  
                write_json(contenu)
                return("Mise à jour réussie",200)
        return("Aucune vulnérabilité avec cet ID",404)

@app.route("/Vulnerability/sbom", methods=["POST"])
def traitement():
    matched=[]
    projet=request.get_json()
    if isinstance(projet,dict):
        projet=[projet]
    keys=["PkgName","InstalledVersion"]
    for item in projet:
        keys_manquantes=[key for key in keys if key not in item ]
        if keys_manquantes:
            return(f"Clés manquantes dans l'entrée JSON:{', '.join(keys_manquantes)}",400)
        PkgName=item['PkgName']
        InstalledVersion=item['InstalledVersion']
        element=lire()
        for Vuln in element:
            if Vuln["PkgName"]==PkgName and Vuln["InstalledVersion"]==InstalledVersion:
                matched.append([{
                        "Vulnerability":Vuln
                        }]
                    )
    if not matched:
        return("Aucune vulnérabilité correspondante trouvée",404)
    return(jsonify(matched),200)  

@app.route ("/Vulnerability/sbom/<int:idSbom>", methods=["GET"])
def getSbomTrait(idSbom):
    response = requests.get(f"http://consult-sbom:5000/version/{idSbom}")
    data=json.loads(response.text)
    contenu=lire()
    matched=[]
    keys=["PkgName","InstalledVersion"]
    for element in data:
        keyManquante=[key for key in keys if key not in element]
        if keyManquante:
            return((f"Clés manquantes dans les données récupérées:{', '.join(keyManquante)}"),400)
    for element in data:
        PkgName=element['PkgName']
        InstalledVersion=element['InstalledVersion']
        vulnerability=[]
        for vuln in contenu:
            if vuln['PkgName']==PkgName and vuln['InstalledVersion']==InstalledVersion:
                vulnerability.append(vuln)
        matched.append({
            vulnerability
                    })
    if not matched:
        return("Aucune vulnérabilité trouvé",404)
    return(jsonify(matched),200)

if __name__ == '__main__':
    app.run(host="0.0.0.0",port=5000)
