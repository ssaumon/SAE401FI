from flask import Flask, jsonify, request
import json, os, requests
app = Flask(__name__)

def lire():
     with open("app/Vulnerability.json", 'r', encoding="utf-8") as f:
        contenu=json.load(f)
        return contenu

def write_json(new_data):

    if os.path.exists("app/Vulnerability.json"):
        os.remove("app/Vulnerability.json")

    with open("app/Vulnerability.json",'w') as file:
        json.dump(new_data, file, indent = 4)

def ajouter():

    vuln=request.get_json()
    if isinstance(vuln, dict):
        vuln=[vuln]

    contenu=lire()
    for item in vuln:  
        required_keys = ['id', 'VulnerabilityID', 'PkgName', 'InstalledVersion', 'FixedVersion', 'Severity', 'Title', 'Description', 'References']
        missing_keys = [key for key in required_keys if key not in item]
        if missing_keys:
            return f"Invalid Input & Missing keys: {', '.join(missing_keys)}", 400
        id=item['id']
        for element in contenu:
            if isinstance(element, dict)and element.get('id') == id:
                return "id already existed", 422

        contenu.append(item)
        
    write_json(contenu)
    
    return "Success",200

@app.route("/")
def hello_world():
    return "<p>MicroService Vulnerability</p>"

@app.route("/Vulnerability", methods=["GET","POST","PUT"])
def ListerAjouter():
    if request.method=="GET":
        try :contenu=lire()
        except:return "Database error",400
        contenu = lire()
        return jsonify(contenu)
    
    if request.method=="POST":
        return(ajouter())
    
    if request.method=="PUT":
        try :contenu=lire()
        except:return "Database error",400
        Vuln=request.get_json()
        id_Vuln=Vuln['id']
        for idx, element in enumerate(contenu):
            if element['id'] == id_Vuln:
                contenu[idx] = Vuln 
                write_json(contenu)
                return "Vulnerability updated", 200
        return "No Vulnerabilities with this id", 404
    else:
        return("Bad request")
    
@app.route("/Vulnerability/<int:id_Vuln>", methods=["GET","DELETE","PUT"])
def rechSupModID(id_Vuln):
    contenu=lire()
    if request.method=="GET":
        for element in contenu:
            if element['id']==id_Vuln:
                return element
            
    if request.method=="DELETE":
        contenu = [element for element in contenu if element['id'] != id_Vuln]
        write_json(contenu)
        return "Succ√®s",200

    if request.method=="PUT": 
        Vuln=request.get_json()
        for idx, element in enumerate(contenu):
            if element['id'] == id_Vuln:
                contenu[idx] = Vuln  
                write_json(contenu)
                return "Vulnerability updated", 200
        return "No Vulnerabilities with this id", 404

@app.route("/Vulnerability/sbom", methods=["POST"])
def traitement():
    matched=[]
    projet=request.get_json()
    if isinstance(projet,dict):
        projet=[projet]
    keys=["PkgName","InstalledVersion"]
    for item in projet:
        keys_manquantes=[key for key in keys if key not in item ]
        if keys_manquantes:
            return f"Missing keys :{', '.join(keys_manquantes)}",400
        PkgName=item['PkgName']
        InstalledVersion=item['InstalledVersion']
        element=lire()
        for Vuln in element:
            if Vuln["PkgName"]==PkgName and Vuln["InstalledVersion"]==InstalledVersion:
                matched.append({
                    "Sbom":{
                        "PkgName":PkgName,
                        "InstalledVersion":InstalledVersion
                        },
                    "Vulnerabilities":[{
                        "Vulnerability":Vuln
                        }]
                    })
    if not matched:
        return "No matching vulnerability found", 404
    return(jsonify(matched),200)  

@app.route ("/Vulnerability/sbom/<int:idSbom>", methods=["GET"])
def getSbomTrait(idSbom):
    response = requests.get(f"/version/{idSbom}")
    data=response.json()
    contenu=lire()
    matched=[]
    if request.method!="GET":
        return "Bad Request",404
    keys=["PkgName","InstalledVersion"]
    for element in data:
        keyManquante=[key for key in keys if key not in element]
        if keyManquante:
            return (f"Missing keys :{', '.join(keyManquante)}"),400
    for element in data:
        PkgName=element['PkgName']
        InstalledVersion=element['InstalledVersion']
        vulnerability=[]
        for vuln in contenu:
            if vuln['PkgName']==PkgName and vuln['InstalledVersion']==InstalledVersion:
                vulnerability.append(vuln)
        matched.append({
                    "Sbom":{
                        "PkgName":PkgName,
                        "InstalledVersion":InstalledVersion
                        },
                    "Vulnerabilities": vulnerability
                    })
    if not matched:
        return "No matching vulnerability found", 404
    return(jsonify(matched),200)

if __name__ == '__main__':
    #app.run(host="0.0.0.0",port=5007)
    app.run(port=5007)